services:
  mtphotos:
    image: mtphotos/mt-photos:nodb-latest
    container_name: mtphotos
    restart: unless-stopped
    user: "1000:1000"
    volumes:
      - ./data/mtphotos/config:/config
      - ./data/mtphotos/upload:/upload
    environment:
      - MT_SERVER_PORT=8063
      - TZ=Asia/Shanghai
      - LANG=C.UTF-8
      - POSTGRES_HOST=mtphotos_db
      - POSTGRES_PASSWORD=mypassword
      - REDIS_HOST=mtphotos_cache
      - REDIS_PORT=6379
      - REDIS_PASSWORD=mypassword
    depends_on:
      mtphotos_db:
        condition: service_healthy
      mtphotos_cache:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mtphotos.rule=Host(`zippy.charmer.fun`)"
      - "traefik.http.routers.mtphotos.entrypoints=websecure"
      - "traefik.http.routers.mtphotos.tls.certresolver=myresolver"
      - "traefik.http.services.mtphotos.loadbalancer.server.port=8063"

  mtphotos_db:
    image: mtphotos/mt-photos-pg:latest # https://mtmt.tech/docs/advanced/ocr_api#vector
    container_name: mtphotos_pg
    restart: unless-stopped
    user: "1000:1000"
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=mypassword
      - PGDATA=/var/lib/postgresql/data/pgdata
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U postgres -d postgres'" ]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s

  mtphotos_cache:
    image: redis:7-alpine
    container_name: mtphotos_redis
    command:
      [
        "redis-server",
        "--appendonly",
        "yes",
        "--loglevel",
        "warning",
        "--requirepass",
        "mypassword"
      ]
    volumes:
      - ./data/redis:/data
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli -a mypassword ping | grep PONG" ]
      interval: 1s
      timeout: 3s
      retries: 5
    restart: on-failure

  mtphotos_ai:
    image: mtphotos/mt-photos-ai:onnx-latest
    container_name: mtphotos_ai
    restart: always
    environment:
      - API_AUTH_KEY=AB8C3768-0334-4B25-8FE5-3EF81C1158FD

  mtphotos_face_api:
    image: mtphotos/mt-photos-deepface:noavx-latest
    container_name: mtphotos_face_api
    restart: always
    environment:
      - API_AUTH_KEY=F809EB6F-5E36-44F7-924B-2D8E68D59297

  reverse-proxy:
    image: traefik:latest
    container_name: reverse-proxy
    ports:
      - "443:443"
      - "8080:8080"
    command:
      - --api=true
      - --ping=true
      - --api.dashboard=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.websecure.address=:443
      - --entrypoints.traefik.address=:8080
      - --accesslog=true
      - --log.level=WARN # DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --certificatesresolvers.myresolver.acme.tlschallenge=true
      # - --certificatesresolvers.myresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory
      - --certificatesresolvers.myresolver.acme.email=oliverdding@outlook.com
      - --certificatesresolvers.myresolver.acme.storage=/cert/acme.json
    healthcheck:
      test: [ "CMD-SHELL", "traefik healthcheck --ping" ]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 5s
    restart: on-failure
    volumes:
      - "./data/cert:/cert"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.entrypoints=traefik"
      - "traefik.http.routers.dashboard.rule=(PathPrefix(`/api`) || PathPrefix(`/dashboard`))"
      - "traefik.http.routers.dashboard.service=api@internal"
